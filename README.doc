ideas
------
a keep alive 'ping' time each 2 seconds, ping time plotted on graph.
a workload slider, how much work the client is requesting from he servber

a graph of 'server' or 'container' is service the client requested  workload, and %age this client is using of the server

some scale ability??

redis - atomic
------

KeyValue pair <key> <string val>:
  - atomic counters (no race conditions)
  - can EXPIRE keys!
GET / SET / INCR / APPEND <key> <val>
EXISTS / DEL / expire <key>
MGET / MSET <key1> <val1> <key2> <val2>

Lists of strings (Linked List, add quicky to left and right):
 - usecase - recent updates on social network, consumer/producer, timeline
LPUSH / RPUSH <list> <val> <val> <val> <...val>
LINDEX <list> <idx> # get value at index
LLEN <list> # length of list
LREM <list> count value
RPOP / LPOP <list> 
LRANGE <list> <start_idx> <end_idx> # (0=start, -1=end) return range of values
LTRIM <list> <start_idx> <end_idx> # (0=start, -1=end)trim list to jsut the rabge
LPUSH / BRPOP - block remove item from list (pub/sub)
RPOPLP

Hash are maps between string fields and string values (used to store objects)
HMSET <key> <prop1> <val1> <prop2> <val2> ...
HGET <key> <prop>
HGETALL <key>
HINCRBY <key> <prop> number

Set unordered collection of Strings
 - usecase - are good to represent relations - tagging.  (set key = newsWithPolitics - members _ids)
SADD <key> <val1> <val2> ...
SPOP <key>  # removes and returns random val in set
SCARD <key> # of items in set
SMEMBERS <key> # returns all members
SISMEMBER <key> <test val>
SINTER <setkey> <setkey> ... # return only the values in all sets

Sorted Sets
  - usecase - leaderboard ZADD usersPingTimes 32 Keith
ZADD <key> <val score> <val1>  # score is a number that sorts the set
ZRANGE /  ZREVRANGE <key> <startidx> <endidx> [withscores] # (0=start, -1=end) # returns range
ZRANGEBYSCRORE <key> [<startidx> <endidx>] [-inf 1950] # inf=upto, 
ZRANK <key> <val> : where is the set is the val?




Commands
 .pipeline() # pipe multiple commands to achive atomic operations.
 .register_script() Redis offers server-side Lua scripting (like stored procedures)
    return an object that can be used like a function to call the script inside Redis

most flexible method for time series date combines: one or more Sorted Set and the Hash



-------
# azure login
azure login

# list out subsciptions
azure account list

# set subscription
azure account set <subscirption/orgid>

# create a RG
azure group create <name> <region>

## deploy the applicaiton gateway
azure group deployment create  -f arm/appgateway.json -e arm/appgatewayparams.json gatewa-test ag-deploy1
 
 ## logs of the deployment
 azure group log show "gatewa-test" --last-deployment
 
 
 ## gatwway configuration
 Nees to be done with PowerShell :(((
Login-AureRmAccount
get-AzureRmSubscription
New-AzureRmResourceGroup -Name "AppGWTest"
$subnet = New-AzureRmVirtualNetworkSubnetConfig -Name subnet01 -AddressPrefix 10.0.0.0/24
 
$gipconfig = New-AzureRmApplicationGatewayIPConfiguration -Name gatewayIP01 -Subnet $subnet 
$pool = New-AzureRmApplicationGatewayBackendAddressPool -Name pool01 -BackendIPAddresses 134.170.185.46, 134.170.188.221,134.170.185.50
$poolSetting = New-AzureRmApplicationGatewayBackendHttpSettings -Name poolsetting01 -Port 80 -Protocol Http -CookieBasedAffinity Enabled
$fp = New-AzureRmApplicationGatewayFrontendPort -Name frontendport01  -Port 443
$cert = New-AzureRmApplicationGatewaySslCertificate -Name cert01 -CertificateFile <full path for certificate file> -Password ‘<password>’
$fipconfig = New-AzureRmApplicationGatewayFrontendIPConfig -Name fipconfig01 -PublicIPAddress $publicip
$listener = New-AzureRmApplicationGatewayHttpListener -Name listener01  -Protocol Https -FrontendIPConfiguration $fipconfig -FrontendPort $fp -SslCertificate $cert
$rule = New-AzureRmApplicationGatewayRequestRoutingRule -Name rule01 -RuleType Basic -BackendHttpSettings $poolSetting -HttpListener $listener -BackendAddressPool $pool
$sku = New-AzureRmApplicationGatewaySku -Name Standard_Small -Tier Standard -Capacity 2
$appgw = New-AzureRmApplicationGateway -Name appgwtest -ResourceGroupName appgw-rg -Location "West US" -BackendAddressPools $pool -BackendHttpSettingsCollection $poolSetting -FrontendIpConfigurations $fipconfig  -GatewayIpConfigurations $gipconfig -FrontendPorts $fp -HttpListeners $listener -RequestRoutingRules $rule -Sku $sku -SslCertificates $cert
 

 
 ------------------
## gateway deployment errors
Public IP Address referenced by Application Gateway FrontendIpConfiguration cannot have Domain Name Label specified. 
  # resolution: remove : "dnsSettings": { "domainNameLabel": "[variables('publicIPAddressName2')]"}
The domain name label AppGWTestVIP01 is invalid. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]
  # resolution: remove upper characters from domainNameLabel
Two Frontend Ports of Application Gateway are using the same port number 443.
Two Http Listeners of Application Gateway are using the same Frontend Port 
Application Gateway cannot have more than one FrontendIPConfigurations using Public IP:
    resolution: 

